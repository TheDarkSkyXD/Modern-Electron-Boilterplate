import { app, BrowserWindow } from 'electron';
import { registerSettingsHandlers } from './main/ipc/handlers/settings';
import { runMigrations } from './main/database/run-migrations';
import { registerAuthHandlers } from './main/ipc/handlers/auth';
import { createMenu } from './main/app/menu-manager';
import { registerNotificationHandlers } from './main/ipc/handlers/notifications';
import { handleCallback } from './main/auth/auth-manager';
import { IPC_CHANNELS } from './main/ipc/channels';
import path from 'path';
import { initializeStore } from './main/storage/settings';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

if (process.defaultApp) {
  if (process.argv.length >= 2) {
    app.setAsDefaultProtocolClient('electron-boilerplate', process.execPath, [
      path.resolve(process.argv[1]),
    ]);
  }
} else {
  app.setAsDefaultProtocolClient('electron-boilerplate');
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  await initializeStore();
  createWindow();
  createMenu();
});

app.on('open-url', async (event, url) => {
  await handleCallback(url);
  const mainWindow = BrowserWindow.getAllWindows()[0];
  mainWindow.webContents.send(IPC_CHANNELS.LOGIN_SUCCESS);
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

registerSettingsHandlers();
runMigrations();
registerAuthHandlers();
registerNotificationHandlers();
